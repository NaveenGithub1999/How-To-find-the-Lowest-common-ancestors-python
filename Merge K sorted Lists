You are given an array of k linked-lists lists, each linked-list is sorted in ascending order.

Merge all the linked-lists into one sorted linked-list and return it.

 

Example 1:

Input: lists = [[1,4,5],[1,3,4],[2,6]]
Output: [1,1,2,3,4,4,5,6]
Explanation: The linked-lists are:
[
  1->4->5,
  1->3->4,
  2->6
]
merging them into one sorted list:
1->1->2->3->4->4->5->6
####################################################################################################################

 def mergeKLists(self, lists: List[Optional[ListNode]]) -> Optional[ListNode]:
 #base case:-
        if not lists or len(lists)==0:
            return None
            
        while len(lists)>1:
            resultlist = []
            for i in range(0,len(lists),2):#to get the pair of lists
                l1 = lists[i]
                l2 = lists[i+1] if (i+1)<len(lists) else None
                resultlist.append(self.mergeList(l1,l2))
            lists = resultlist
        return lists[0]


def mergeList(self,l1,l2):   #passing two node at a time l1 and l2
        #create dummy list
        dummy = ListNode(0)
        tail = dummy 
        while l1 and l2:
          if l1.val<l2.val:  #sorting the linked list forming the list
            tail.next = l1
            l1 = l1.next
          else:
            tail.next = l2
            l2 = l2.next
          tail = tail.next
  #if any of the list is remaining to form then
        if l1:
          tail.next = l1
        if l2:
          tail.next = l2
        return dummy.next
            
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
        
