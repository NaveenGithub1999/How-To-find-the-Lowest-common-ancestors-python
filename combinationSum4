Given an array of distinct integers nums and a target integer target, 
return the number of possible combinations that add up to target.

The test cases are generated so that the answer can fit in a 32-bit integer.

 

Example 1:

Input: nums = [1,2,3], target = 4
Output: 7
Explanation:
The possible combination ways are:
(1, 1, 1, 1)
(1, 1, 2)
(1, 2, 1)
(1, 3)
(2, 1, 1)
(2, 2)
(3, 1)
Note that different sequences are counted as different combinations.




class Solution:
    def combinationSum4(self, nums, target: int) -> int:
        dp = [0] * (target+1)   # target+1 because we need dp[0]
        dp[0] = 1 #assingning the first value because we cant take 0
        
        for t in range(1, target+1):
            for num in nums:
                if t>=num:
                #adding for each index of value in dp
                    dp[t] += dp[t-num]
                    print(dp)           

        return dp[target]
n = [1,2,3]
d = 7
obj =   Solution()
print(obj.combinationSum4(n,d))
