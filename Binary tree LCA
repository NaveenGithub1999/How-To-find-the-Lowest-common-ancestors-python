Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, x):
#         self.val = x
#         self.left = None
#         self.right = None

To find the lowest common ancestors in binary search tree ,
In this question we have given the two different treenodes and we have to find the treenode in between that,
so lets see how we can do.
class Solution:
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode':
#here we can see the base case as if we dont have the root itself than we have to return None
        if not root:
            return None
#to check the value of rootnode we need to check in which side of the tree it is lying
if its greater than values then it will from left side or else from the right side
        if (root.val>p.val and root.val>q.val):
            return self.lowestCommonAncestor(root.left,p,q)
        else:
            if root.val<p.val and root.val<q.val:
                return self.lowestCommonAncestor(root.right,p,q)
            else:
                return root
                
