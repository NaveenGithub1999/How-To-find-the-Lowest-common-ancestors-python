# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def deepestLeavesSum(self, root: Optional[TreeNode]) -> int:
        #using the hmap to store the node values
        hmap = {}
        levl = -1
        #creating the recursive function to iterate throughout the left and right
        def dfs(node,depth):
            nonlocal levl
            if not node:
                return
            if depth > levl:
                levl = depth
                hmap[depth] = 0
            hmap[depth]+=node.val
            dfs(node.left,depth+1)
            dfs(node.right,depth+1)
        dfs(root,0)
        if levl!=-1:
            return hmap[levl]
        else:
            return 0
